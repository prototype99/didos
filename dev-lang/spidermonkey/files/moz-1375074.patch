
# HG changeset patch
# User Lars T Hansen <lhansen@mozilla.com>
# Date 1519822672 -3600
# Node ID 800abe66894d6b07b24bccecbf6a65e2261076f6
# Parent  223c97459e96183eb616aed39147207bdb953ba8
Bug 1375074 - Save and restore non-volatile x28 on ARM64 for generated unboxed object constructor.  r=sstangl

Description: Fixes JIT crashes on aarch64.
Origin: upstream, https://hg.mozilla.org/mozilla-central/rev/800abe66894d
Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1375074
Applied-Upstream: 61.0.0

Index: mozjs-60.8.0/js/src/jit-test/tests/bug1375074.js
===================================================================
--- /dev/null
+++ mozjs-60.8.0/js/src/jit-test/tests/bug1375074.js
@@ -0,0 +1,18 @@
+// This forces the VM to start creating unboxed objects and thus stresses a
+// particular path into generated code for a specialized unboxed object
+// constructor.
+
+var K = 2000;			// 2000 should be plenty
+var s = "[";
+var i;
+for ( i=0; i < K-1; i++ )
+    s = s + `{"i":${i}},`;
+s += `{"i":${i}}]`;
+var v = JSON.parse(s);
+
+assertEq(v.length == K, true);
+
+for ( i=0; i < K; i++) {
+    assertEq(v[i] instanceof Object, true);
+    assertEq(v[i].i, i);
+}
Index: mozjs-60.8.0/js/src/vm/UnboxedObject.cpp
===================================================================
--- mozjs-60.8.0.orig/js/src/vm/UnboxedObject.cpp
+++ mozjs-60.8.0/js/src/vm/UnboxedObject.cpp
@@ -86,8 +86,15 @@ static const uintptr_t CLEAR_CONSTRUCTOR
 #endif
 
 #ifdef JS_CODEGEN_ARM64
-  // ARM64 communicates stack address via sp, but uses a pseudo-sp for
-  // addressing.
+  // ARM64 communicates stack address via sp, but uses a pseudo-sp (PSP) for
+  // addressing.  The register we use for PSP may however also be used by
+  // calling code, and it is nonvolatile, so save it.  Do this as a special
+  // case first because the generic save/restore code needs the PSP to be
+  // initialized already.
+  MOZ_ASSERT(PseudoStackPointer64.Is(masm.GetStackPointer64()));
+  masm.Str(PseudoStackPointer64, vixl::MemOperand(sp, -16, vixl::PreIndex));
+
+  // Initialize the PSP from the SP.
   masm.initStackPtr();
 #endif
 
@@ -239,7 +246,22 @@ static const uintptr_t CLEAR_CONSTRUCTOR
   if (ScratchDoubleReg.volatile_()) masm.pop(ScratchDoubleReg);
   masm.PopRegsInMask(savedNonVolatileRegisters);
 
+#ifdef JS_CODEGEN_ARM64
+  // Now restore the value that was in the PSP register on entry, and return.
+
+  // Obtain the correct SP from the PSP.
+  masm.Mov(sp, PseudoStackPointer64);
+
+  // Restore the saved value of the PSP register, this value is whatever the
+  // caller had saved in it, not any actual SP value, and it must not be
+  // overwritten subsequently.
+  masm.Ldr(PseudoStackPointer64, vixl::MemOperand(sp, 16, vixl::PostIndex));
+
+  // Perform a plain Ret(), as abiret() will move SP <- PSP and that is wrong.
+  masm.Ret(vixl::lr);
+#else
   masm.abiret();
+#endif
 
   masm.bind(&failureStoreOther);
 
